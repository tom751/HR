// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_hr_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HrClient is the client API for Hr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HrClient interface {
	Login(ctx context.Context, in *LoginDetails, opts ...grpc.CallOption) (*User, error)
}

type hrClient struct {
	cc grpc.ClientConnInterface
}

func NewHrClient(cc grpc.ClientConnInterface) HrClient {
	return &hrClient{cc}
}

func (c *hrClient) Login(ctx context.Context, in *LoginDetails, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/hr.Hr/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HrServer is the server API for Hr service.
// All implementations must embed UnimplementedHrServer
// for forward compatibility
type HrServer interface {
	Login(context.Context, *LoginDetails) (*User, error)
	mustEmbedUnimplementedHrServer()
}

// UnimplementedHrServer must be embedded to have forward compatible implementations.
type UnimplementedHrServer struct {
}

func (UnimplementedHrServer) Login(context.Context, *LoginDetails) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedHrServer) mustEmbedUnimplementedHrServer() {}

// UnsafeHrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HrServer will
// result in compilation errors.
type UnsafeHrServer interface {
	mustEmbedUnimplementedHrServer()
}

func RegisterHrServer(s grpc.ServiceRegistrar, srv HrServer) {
	s.RegisterService(&Hr_ServiceDesc, srv)
}

func _Hr_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hr.Hr/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServer).Login(ctx, req.(*LoginDetails))
	}
	return interceptor(ctx, in, info, handler)
}

// Hr_ServiceDesc is the grpc.ServiceDesc for Hr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hr.Hr",
	HandlerType: (*HrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Hr_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/hr.proto",
}
